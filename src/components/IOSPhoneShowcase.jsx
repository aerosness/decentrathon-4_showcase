import React, { useState, useEffect } from 'react';
import './IOSPhoneShowcase.css';

const IOSPhoneShowcase = () => {
  const [notifications, setNotifications] = useState([]);
  const [currentNotificationIndex, setCurrentNotificationIndex] = useState(0);
  const [notificationsData, setNotificationsData] = useState([]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ CSV –¥–∞–Ω–Ω—ã—Ö
  const parseCSV = (csvText) => {
    const lines = csvText.trim().split('\n');
    const data = [];
    
    for (let i = 1; i < lines.length; i++) {
      const line = lines[i];
      if (!line) continue;
      
      // –ë–æ–ª–µ–µ —Ç–æ—á–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ CSV —Å —É—á–µ—Ç–æ–º –∫–∞–≤—ã—á–µ–∫
      const values = [];
      let current = '';
      let inQuotes = false;
      
      for (let j = 0; j < line.length; j++) {
        const char = line[j];
        if (char === '"') {
          inQuotes = !inQuotes;
        } else if (char === ',' && !inQuotes) {
          values.push(current);
          current = '';
        } else {
          current += char;
        }
      }
      values.push(current); // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
      
      if (values.length >= 3) {
        const clientCode = values[0];
        const product = values[1];
        const message = values[2];
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è (–ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π)
        const nameMatch = message.match(/^([–ê-–Ø–∞-—è]+),/);
        const name = nameMatch ? nameMatch[1] : `–ö–ª–∏–µ–Ω—Ç ${clientCode}`;
        
        data.push({
          id: parseInt(clientCode),
          name: name,
          product: product,
          message: message,
          time: new Date(Date.now() - Math.random() * 3600000).toLocaleTimeString('ru-RU', {
            hour: '2-digit',
            minute: '2-digit'
          })
        });
      }
    }
    
    return data;
  };

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ CSV —Ñ–∞–π–ª–∞
  useEffect(() => {
    const loadNotifications = async () => {
      try {
        const response = await fetch('/recommendations.csv');
        const csvText = await response.text();
        const parsedData = parseCSV(csvText);
        setNotificationsData(parsedData.slice(0, 15)); // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 15 –∑–∞–ø–∏—Å–µ–π
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ CSV:', error);
        // Fallback –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ CSV –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª—Å—è
        setNotificationsData([
          {
            id: 1,
            name: "–ê–π–≥–µ—Ä–∏–º",
            product: "–î–µ–ø–æ–∑–∏—Ç",
            message: "–ê–π–≥–µ—Ä–∏–º, —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å —Å–≤–æ–±–æ–¥–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –Ω–∞ –¥–µ–ø–æ–∑–∏—Ç–µ –ø–æ–¥ 15%! –≠—Ç–æ –æ—Ç–ª–∏—á–Ω—ã–π —Å–ø–æ—Å–æ–± –ø—Ä–∏—É–º–Ω–æ–∂–∏—Ç—å –≤–∞—à–∏ —Ñ–∏–Ω–∞–Ω—Å—ã.",
            time: "14:32"
          }
        ]);
      }
    };

    loadNotifications();
  }, []);

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ –æ–¥–Ω–æ–º—É
  useEffect(() => {
    if (notificationsData.length === 0) return;
    
    const interval = setInterval(() => {
      if (currentNotificationIndex < notificationsData.length) {
        const newNotification = {
          ...notificationsData[currentNotificationIndex],
          id: Date.now() + currentNotificationIndex,
          isNew: true
        };
        
        setNotifications(prev => [newNotification, ...prev.slice(0, 4)]); // –ú–∞–∫—Å–∏–º—É–º 5 —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        setCurrentNotificationIndex(prev => prev + 1);
        
        // –£–±–∏—Ä–∞–µ–º —Ñ–ª–∞–≥ "–Ω–æ–≤–æ–µ" —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(() => {
          setNotifications(prev => 
            prev.map(n => n.id === newNotification.id ? {...n, isNew: false} : n)
          );
        }, 3000);
      } else {
        // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Ü–∏–∫–ª
        setCurrentNotificationIndex(0);
      }
    }, 4000);

    return () => clearInterval(interval);
  }, [currentNotificationIndex, notificationsData]);

  const handleNotificationClick = (notification) => {
    // –£–±–∏—Ä–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏ –∫–ª–∏–∫–µ
    setNotifications(prev => prev.filter(n => n.id !== notification.id));
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º toast
    const toast = document.createElement('div');
    toast.className = 'ios-toast';
    toast.innerHTML = `
      <div class="ios-toast-content">
        <div class="ios-toast-icon">‚úÖ</div>
        <div class="ios-toast-text">–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!</div>
      </div>
    `;
    document.body.appendChild(toast);
    
    setTimeout(() => {
      if (toast.parentNode) {
        toast.remove();
      }
    }, 3000);
  };

  return (
    <div className="ios-phone-showcase">
      <div className="iphone-container">
        {/* –§–æ–Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ iPhone */}
        <div className="iphone-background">
          <img src="/images/iphone.png" alt="iPhone" />
        </div>
        
        {/* –û–±–ª–∞—Å—Ç—å –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π */}
        <div className="notifications-overlay">
          {notifications.map((notification, index) => (
            <div
              key={notification.id}
              className={`ios-notification ${notification.isNew ? 'new' : ''}`}
              style={{ 
                top: `${10 + index * 80}px`,
                animationDelay: `${index * 0.1}s`
              }}
              onClick={() => handleNotificationClick(notification)}
            >
              {/* –õ–æ–≥–æ—Ç–∏–ø –±–∞–Ω–∫–∞ */}
              <div className="bank-logo">
                <div className="bcc-logo">
                  <img src="/images/bcc.png" alt="BCC Bank" />
                </div>
              </div>
              
              {/* –ö–æ–Ω—Ç–µ–Ω—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è */}
              <div className="notification-content">
                <div className="notification-header">
                  <span className="app-name">bcc.kz</span>
                  <span className="notification-time">{notification.time}</span>
                </div>
                <div className="notification-body">
                  {notification.message.substring(0, 120)}
                  {notification.message.length > 120 ? '...' : ''}
                </div>
              </div>
              
              {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è */}
              {notification.isNew && <div className="new-indicator"></div>}
            </div>
          ))}
        </div>
        
        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å */}
        <div className="info-section">
          <h2>–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –±–∞–Ω–∫–æ–≤—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</h2>
          <div className="features">
            <div className="feature">
              <div className="feature-icon">ü§ñ</div>
              <div className="feature-text">
                <h3>AI-–∞–Ω–∞–ª–∏–∑</h3>
                <p>–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–∞—à–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏ –ø–æ–≤–µ–¥–µ–Ω–∏–µ</p>
              </div>
            </div>
            <div className="feature">
              <div className="feature-icon">üéØ</div>
              <div className="feature-text">
                <h3>–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è</h3>
                <p>–ü–æ–¥–±–∏—Ä–∞–µ–º –∏–º–µ–Ω–Ω–æ —Ç–µ –ø—Ä–æ–¥—É–∫—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤–∞–º –ø–æ–¥—Ö–æ–¥—è—Ç</p>
              </div>
            </div>
            <div className="feature">
              <div className="feature-icon">üì±</div>
              <div className="feature-text">
                <h3>–£–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</h3>
                <p>–ü–æ–ª—É—á–∞–π—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –≤ –Ω—É–∂–Ω–æ–µ –≤—Ä–µ–º—è –∏ –≤ –Ω—É–∂–Ω–æ–º –º–µ—Å—Ç–µ</p>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default IOSPhoneShowcase;
